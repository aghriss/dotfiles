;==========================================================
;
;
;   ██████╗  ██████╗ ██╗  ██╗   ██╗██████╗  █████╗ ██████╗
;   ██╔══██╗██╔═══██╗██║  ╚██╗ ██╔╝██╔══██╗██╔══██╗██╔══██╗
;   ██████╔╝██║   ██║██║   ╚████╔╝ ██████╔╝███████║██████╔╝
;   ██╔═══╝ ██║   ██║██║    ╚██╔╝  ██╔══██╗██╔══██║██╔══██╗
;   ██║     ╚██████╔╝███████╗██║   ██████╔╝██║  ██║██║  ██║
;   ╚═╝      ╚═════╝ ╚══════╝╚═╝   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
;
;
;   To learn more about how to configure Polybar
;   go to https://github.com/polybar/polybar
;
;   The README contains a lot of information
;
;==========================================================

[colors]
; background = #282A2E
background = #101010
background-alt = #373B41
foreground = #C5C8C6
primary = #F0C674
secondary = #8ABEB7
alert = #A54242
disabled = #707880

[sizes]
bar-width = 100%
bar-height = 18pt

[settings]
; The throttle settings lets the eventloop swallow up til X events
; if they happen within Y millisecond after first event was received.
; This is done to prevent flood of update event.
;
; For example if 5 modules emit an update event at the same time, we really
; just care about the last one. But if we wait too long for events to swallow
; the bar would appear sluggish so we continue if timeout
; expires or limit is reached.
; throttle-output = 5
; throttle-output-for = 10

; Time in milliseconds that the input handler will wait between processing events
; throttle-input-for = 30

; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = false

; Compositing operators
; @see: https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over

; pseudo-transparency = true
; vim:ft=dosini
; [global/wm]
margin-bottom = 0
border-bottom = 0

border-size = 0pt

[bar/main]
width = ${sizes.bar-width}
height = ${sizes.bar-height}
radius = 0
; bottom = false
bottom = true
dpi = 120
background = ${colors.background}
foreground = ${colors.foreground}
line-size = 2
border-size = 0pt
border-color = #00000000
padding-left = 1
padding-right = 1
padding = 0
module-margin = 1
separator = |
separator-foreground = ${colors.disabled}

font-0 = monospace:size=10;2

modules-left = xworkspaces xwindow
modules-right = xkeyboard kmonad memory cpu battery

cursor-click = pointer
cursor-scroll = ns-resize

enable-ipc = true

tray-position = right
; tray-maxsize = 360
tray-detached = false
tray-padding = 0
; tray-offset-x = 0
; tray-offset-y = 0
; tray-maxsize = true
; wm-restack = generic
; wm-restack = bspwm
wm-restack = i3
; override-redirect = true

; Enable support for inter-process messaging
; See the Messaging wiki page for more details.
; enable-ipc = true
[module/battery]
type = internal/battery
time-format = %H:%M
poll-interval = 5
; This is useful in case the battery never reports 100% charge
; Default: 100
full-at = 91

; format-low once this charge percentage is reached
; Default: 10
; New in version 3.6.0
low-at = 5

; Use the following command to list batteries and adapters:
; $ ls -1 /sys/class/power_supply/
battery = BAT1
adapter = ACAD

; If an inotify event haven't been reported in this many
; seconds, manually poll for new values.
;
; Needed as a fallback for systems that don't report events
; on sysfs/procfs.
;
; Disable polling by setting the interval to 0.
;
; Default: 5
; format-discharging = <ramp-capacity> <label-discharging>
format-discharging = <label-discharging>
format-discharging-underline = ${colors.alert}
label-discharging = D %time% %percentage%%

[module/xworkspaces]
type = internal/xworkspaces
label-active = %name%
label-active-background = ${colors.background-alt}
label-active-underline= ${colors.primary}
label-active-padding = 1
label-occupied = %name%
label-occupied-padding = 1
label-urgent = %name%
label-urgent-background = ${colors.alert}
label-urgent-padding = 1
label-empty = %name%
label-empty-foreground = ${colors.disabled}
label-empty-padding = 1

[module/xwindow]
type = internal/xwindow
label = %title:0:100:...%

[module/network]
type = internal/network
interface = lo
interval = 1.0
label-connected = "%downspeed%   %upspeed%"
label-connected-background = #FF0000

[module/filesystem]
type = internal/fs
interval = 25
mount-0 = /
label-mounted = %{F#F0C674}%mountpoint%%{F-} %percentage_used%%
label-unmounted = %mountpoint% not mounted
label-unmounted-foreground = ${colors.disabled}


[module/kmonad]
type = custom/script
exec = tail -f /run/kmonad/status
exec-if = pgrep -x kmonad
; interval = 0.7
tail = true
; format-prefix-foreground = #5b

[module/xkeyboard]
type = internal/xkeyboard
blacklist-0 = num lock

label-layout = %layout%
label-layout-foreground = ${colors.primary}

label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-foreground = ${colors.background}
label-indicator-background = ${colors.secondary}

[module/memory]
type = internal/memory
interval = 2
format-prefix = "RAM "
format-prefix-foreground = ${colors.primary}
label = %gb_used%, %percentage_used:1%%

[module/cpu]
type = internal/cpu
interval = 2
format-prefix = "CPU "
format-prefix-foreground = ${colors.primary}
label = %percentage:2%%

; [module/date]
; type = internal/date
; interval = 1
; date = %H:%M
; date-alt = %Y-%m-%d %H:%M:%S
; label = %date%
; label-foreground = ${colors.primary}

; include-file = ~/.config/polybar/modules/counts.ini
